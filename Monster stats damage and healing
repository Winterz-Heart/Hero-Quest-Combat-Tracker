#!/usr/bin/env python3

class MONSTER:
  def __init__(self, name, movement, attack_dice, defence_dice, body, mind):

    # Monster Name
    self.name = name

    # Movement Count
    self.current_movement = movement
    self.max_movement = movement

    # Attack and Defence Dice count
    self.current_attack = attack_dice
    self.max_attack = attack_dice
    self.current_defence = defence_dice
    self.max_defence = defence_dice

    # Monster current Body points and max Body points
    self.max_body = body
    self.current_body = body

    # Status tied to Body points
    self.body_status = "Alive"

    # Monster current Mind points and max Mind points
    self.max_mind = mind
    self.current_mind = mind

    # Status tied to Mind points
    self.mind_status = "Normal"

  # Monster taking damage to Body points
  def take_damage_body(self, body_damage_value):
    self.body_damage_value = body_damage_value
    self.current_body -= self.body_damage_value
    print(f"\n{self.name} takes {self.body_damage_value} to their Body!")

    # When Monster Body Points reach 0
    if self.current_body <= 0:
      self.current_body = 0
      self.body_status = "Dead"
      return self.body_status

  # Monster taking damage to mind points
  def take_damage_mind(self, mind_damage_value):
    self.mind_damage_value = mind_damage_value
    self.current_mind -= self.mind_damage_value
    print(f"\n{self.name} takes {self.mind_damage_value} to their Mind!")

    # When Monster Mind Points reach 0
    if self.current_body <= 0:
      self.current_body = 0
      self.body_status = "In Shock"
      if self.current_attack > 1:
        self.current_attack = 1
      if self.current_defence > 2:
        self.current_defence = 2
      self.current_movement = self.max_movement / 2
      return self.body_status
     
  # Healing Body Points
  def heal_body(self, body_heal_value):
    self.body_heal_value = body_heal_value
    self.current_body += self.body_heal_value

    # Over healing Prevention
    if self.current_body > self.max_body:
      self.current_body = self.max_body
      print(f"{self.name} has had their Body restored to {self.max_body}")
    else:
      print(f"{self.name} has had their Body restored to {self.current_body}")

  # Healing Mind Points
  def heal_mind(self, mind_heal_value):
    self.mind_heal_value = mind_heal_value
    self.current_mind += self.mind_heal_value

    # Over healing Prevention
    if self.current_mind > self.max_mind:
      self.current_mind = self.max_mind
      print(f"{self.name} has had their Mind restored to {self.max_mind}")
    else:
      print(f"{self.name} has had their Mind restored to {self.current_mind}")

# Setting the Monsters stats

# Monster Name
def get_monster_name():
  name = input(f"/nEnter Name of monster in encounter (Q to stop adding more): ").lower()
  print("")
  return name

# Monster Movement count
def get_monster_movement():
  while True:
    try:
      movement = int(input("Enter Monster's Movement count: "))
    except ValueError:
      print("Invalid Movement count. Please enter a number")
    else:
      break
  return movement

# Monster Attack Dice count
def get_monster_attack_dice():
  while True:
    try:
      attack_dice = int(input("Enter Monster's Attack Dice count: "))
    except ValueError:
      print("Invalid Attack Dice count. Please enter a number")
    else:
      break
  return attack_dice

# Monster defence Dice count
def get_monster_defence_dice():
  while True:
    try:
      defence_dice = int(input("Enter Monster's Defence Dice count: "))
    except ValueError:
      print("Invalid Defence Dice count. Please enter a number")
    else:
      break
  return defence_dice

# Monster Body Points
def get_monster_body():
  while True:
    try:
      body = int(input("Enter Monster's Body Point total: "))
    except ValueError:
      print("Invalid Body Point total. Please enter a number")
    else:
      break
  return body

# Monster Mind Points
def get_monster_mind():
  while True:
    try:
      mind = int(input("Enter Monster's Mind Point total: "))
    except ValueError:
      print("Invalid Mind Point total. Please enter a number")
    else:
      break
  return mind

# Creating the monster
def create_monster(name, movement, attack_dice, defence_dice, body, mind):
  monster = MONSTER(name, movement, attack_dice, defence_dice, body, mind)
  return monster

# Print list of current encounter members and their status
def print_encounter_status(encounter):
  print("\nCurrent Encounter Status:")
  for k, v in encounter.items():
    if encounter[k].body_status == "Alive":
      print(f"Name: {encounter[k].name}, Movement: {encounter[k].current_movement}, Attack: {encounter[k].current_attack}, Defence: {encounter[k].current_defence}, Body: {encounter[k].current_body}/{encounter[k].max_body} - {encounter[k].body_status},  Mind: {encounter[k].current_mind}/{encounter[k].max_mind} - {encounter[k].mind_status}")
    else:
      print(f"Name: {encounter[k].name} - {encounter[k].body_status}")

# Handling game mechanics
def handling_game_mechanics_menu():
  option = input("\nSelect an option:\n1. Take body damage\n2. Take mind damage\n3. Heal body\n4. Heal mind\n5. Exit\n")
  return option

# Getting target monster
def get_target_monster(encounter):
  while True:
    monster = input("Enter the name of the monster to target: ").lower()
    if monster in encounter:
      return encounter[monster]
    else:
      print("Invalid monster name. Please try again.")

# Main application
if __name__ == "__main__":
  try:
    print("\n")
    print("\n")
    print("Welcome to the Monster Party Tracker!")
    print("\n")
    print("\n")

    # Dictionary to hold the encounter members
    encounter = {}

    setting_up_encounter = True

    handling_game_mechanics = True

    encounter_death_count = 0

    while setting_up_encounter:

      monster_name = get_monster_name()
      if monster_name == "q":
        break
      else:
        monster_attack = get_monster_attack_dice()
        monster_defence = get_monster_defence_dice()
        monster_movement = get_monster_movement()
        monster_body = get_monster_body()
        monster_mind = get_monster_mind()

        monster = create_monster(monster_name, monster_movement, monster_attack, monster_defence, monster_body, monster_mind)
        encounter.update({monster.name: monster}) 

    # Print the encounter status
    print_encounter_status(encounter)

    while handling_game_mechanics:
      option = handling_game_mechanics_menu()
      
      # Monster taking body damage
      if option == "1":
        target_monster = get_target_monster(encounter)

        while True:
          try:
            target_damage_value_body = int(input(f"Enter the amount of Body damage {target_monster.name} is taking: "))
            encounter[target_monster.name].take_damage_body(target_damage_value_body)
        
            if encounter[target_monster.name].body_status == "Dead":
              encounter_death_count += 1
            
            print_encounter_status(encounter)

            if encounter_death_count == len(encounter):
              print("All monsters are dead. Game Over!")
              exit()

          except ValueError:
            print("Invalid Body damage value. Please enter a number")
          else:
            break

      # Monster taking mind damage
      elif option == "2":
        target_monster = get_target_monster(encounter)

        while True:
          try:
            target_damage_value_mind = int(input(f"Enter the amount of Mind damage {target_monster.name} is taking: "))
            encounter[target_monster.name].take_damage_mind(target_damage_value_mind)

            print_encounter_status(encounter)

          except ValueError:
            print("Invalid Mind damage value. Please enter a number")
          else:
            break        

      # Monster healing body points
      elif option == "3":
        target_monster = get_target_monster(encounter)

        while True:
          try:
            target_heal_value_body = int(input(f"Enter the amount of Body healing {target_monster.name} is taking: "))
            encounter[target_monster.name].heal_body(target_heal_value_body)

            print_encounter_status(encounter)

          except ValueError:
            print("Invalid Body heal value. Please enter a number")
          else:
            break

      # Monster healing mind points
      elif option == "4":
        target_monster = get_target_monster(encounter)

        while True:
          try:
            target_heal_value_mind = int(input(f"Enter the amount of Mind healing {target_monster.name} is taking: "))
            encounter[target_monster.name].heal_mind(target_heal_value_mind)

            print_encounter_status(encounter)

          except ValueError:
            print("Invalid Mind heal value. Please enter a number")
          else:
            break

      # Exit the game
      elif option == "5":
        print("Exiting the game...")
        exit()
  except KeyboardInterrupt:
    print("\nClosing the game...")
    exit()